0) Introduccion - ¿Qué es JavaScript?

    - Lenguaje de programacion

    - Interpretado (todo el codigo que escribimos no tiene que ser pasado por un compilador, sino que va directamente a   ajecutarse en el navegador, tiene una herramienta que se llama interpreter ,que interpreta el codigo en tiempo real, que se va ejecutando linea por linea, algoritmicamente)

    - Orientado a Objetos (Es un lenguaje en donde su estructura abarca todas las carateristicas de programacion orientada a objetos, abarca: <class> <herencia> <polimorfismo>)

    - Imperativo (Todas las instrucciones van en linea en linea, el codigo se ejecuta linea por linea, paso por paso)

    - Case sensitive (Upper and Lower Case) (Es sensible a mayusculas y minusculas)

    - Basado en prototipos / instancias / classless

    - Tipado debil (El valor de las variables puede cambiar con el tiempo ,el tipo de dato)

    - Lenguaje dinamico (La variable no se ajusta al dato, el dato se ajusta a la variable)

    - ECMASCRIPT (5.1 y 6,7,8, NEXT)

1) Editor de codigo (VSC)

2) ¿Para que se usa?

    - Dinamismo en elos sitios web (del lado del cliente)
    - Servidor Nodejs
    - Tecnologias Frontend como Angular, React, Vue.JavaScript

    Otros usos no tan comunes:

    - Inteligencia Artificial
    - Placas ealectronicas (Jhonny five)
    - Mobile Apps
    - Desktop Apps
    - Etc...

3) Formas de enlazar JavaScript

    - En linea
    - Como contenido en la etiqueta <Script>
    - Como contenido en un archivo de formato .js 
    - Con un require(), esto sería del lado del servidor, con Nodejs

4) variables

    - Concepto (es una caja que contiene algo, un dato, cuya caja le podemos poner el nombre que querramos)
        &&     (es un espacio que guardamos,reservamos en la memoria de nuestro programa, para usarlo de vuelta)
    - Ejemplo
    - Tipos de Datos: String (cadena de texto) = 'cadena de texto' || "cadena de texto",
                      Number = 19, 
                      Boolean = true || false, 
                      Symbol=> no es un dato primitivo)

    - Casos especiales de datos: Undefined => la declaramos, pero no le hemos dado valor,
                                 Null => significa vacio, pero nosotros le hemos dado ese valor,
                                 Nan => not a number;
    - Scope
    - Hoisting
    - Tipos de Variables (let, var y const)
    - Crear multiples variables (separandolas con coma) => let nombre1 =  'jorge', nombre2 = 'pedrita';

    - pruebas con prompt:
        let nombre = prompt('Dime tu nombre');
        alert('Hola ' + nombre);

5) Operadores en JavaScript

    - Operadores de Asignacion => {

        un operador se Asignacion asigna un valor al operando de la izquierda basado en el valor del 
        operando de la derecha

        
        Operadores de asignación compuestos
        Nombre	                                        Operador abreviado	                 Significado
        Asignación	                                            x = y	                        x = y
        Asignación de adición	                                x += y	                        x = x + y
        Asignación de resta	                                    x -= y	                        x = x - y
        Asignación de multiplicación	                        x *= y	                        x = x * y
        Asignación de división	                                x /= y	                        x = x / y
        Asignación de residuo	                                x %= y	                        x = x % y
        Asignación de exponenciación	                        x **= y	                        x = x ** y
        Asignación de desplazamiento a la izquierda	            x <<= y	                        x = x << y
        Asignación de desplazamiento a la derecha	            x >>= y	                        x = x >> y
        Asignación de desplazamiento a la derecha sin signo	    x >>>= y	                    x = x >>> y
        Asignación AND bit a bit	                            x &= y	                        x = x & y
        Asignación XOR bit a bit	                            x ^= y	                        x = x ^ y
        Asignación OR bit a bit	                                x |= y	                        x = x | y
        Asignación AND lógico	                                x &&= y	                        x && (x = y)
        Asignación OR lógico	                                x ||= y	                        x || (x = y)
        Asignación de anulación lógica	                        x ??= y	                        x ?? (x = y)
}
    - Operadores Aritmeticos => {
        los operadores aritemeticos toman valores numericos (ya sean literales o variables) como sus
        operandos y retornan un valor numerico unico

        Operador	                    Descripción	Ejemplo
        Residuo (%)	        Operador binario. Devuelve el resto entero de dividir los dos operandos.	
                            12 % 5 devuelve 2.

        Incremento (++)	    Operador unario. Agrega uno a su operando. Si se usa como operador prefijo (++x), 
                            devuelve el valor de su operando después de agregar uno; si se usa como operador sufijo (x++),
                            devuelve el valor de su operando antes de agregar uno.
                            Si x es 3, ++x establece x en 4 y devuelve 4, mientras que x++ devuelve 3 y ,
                            solo entonces, establece x en 4.

        Decremento (--) 	Operador unario. Resta uno de su operando. El valor de retorno es análogo al del operador de incremento.
                        	Si x es 3, entonces --x establece x en 2 y devuelve 2, mientras que x-- devuelve 3 y,
                            solo entonces, establece x en 2.

        Negación unaria (-)	Operador unario. Devuelve la negación de su operando.
                        	Si x es 3, entonces -x devuelve -3.

        Positivo unario (+)	Operador unario. Intenta convertir el operando en un número, si aún no lo es.	
                            +"3" devuelve 3.
                            +true devuelve 1.

        Operador de exponenciación (**)	Calcula la base a la potencia de exponente, es decir, baseexponente	2 ** 3 returns 8.
                                         10 ** -1 returns 0.1.
    }

---------------------------------------------------------------------------------------------------------------------------------------------------
                                                     Empieza Lo Chido    


6) Concatenacion

    - Definicion y Ejemplo
    - Con el signo +
    - para numeros forzamos string ("" + 9 + 4)
    - Con Concat
    - Con backtiks y la variable entre ${}

    -con el signo{
        saludo = "Hola Pedro\n";
        pregunta = "¿Como Estás?";

        frase = saludo + pregunta;
        
        document.write(frase);
    }
    -forzarmos String{
        numero1 = 5;
        numero2 = 8;

        numeros = "" + numero1 + numero2 => se crea un string => output => 58
    }
    -Contact{ es solo para los Strings
        numero1 = '53';
        numero2 = 8;

        numeros = numero1.contact(numero2) => es un metodo de cadena
    }
    -backtiks{
        name = "Stiven Diaz";
        frase = `soy ${name} y estoy estudiando js`; => se debe encerar entre backtiks ` ${} `
    }

7) Backtiks (bloquote o acento grave) y escape

    - Sin backticks: "Linea 1\
                            Linea 2"
    - Con backtiks: `````linea 1
                            linea 2`
    
    - Escape de comillas simples ' "" ' ✔  '  ''  ' ❌ unas commilas simples no pueden contener comillas simples
    - escape de comillas dobles  " '' " ✔  "  ""  " ❌ unas commilas dobles no pueden contener comillas dobles

---------------------------------------------------------------------------------------------------------------------
                                Pasamos Al Editor de Codigo, Operadores.js

8) Operadores (Intermedio)

    - Operadores de comparacion
    - Operadores Logicos

9) Camel Case

10) Condicionales

    - if
    - else if
    - else