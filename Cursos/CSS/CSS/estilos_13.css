*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: sans-serif;
    font-size: 25px;
}


/*                                          Display:grid-;                                         */


/* -----------------------------------------CONCEPTOS BASICOS------------------------------------ */
/*


grid-container
grid-item son aquellos elementos quie ponemos dentro del contnedor
grid-cell son cada una de las divisiones/de los cuadritos
grid-tracks  una fila completa es un grid track
                una columna completa es un grid track
                    (colum y row) fials + columnas = grid tracks

grid-area  als areas las definimos nosotros, si son areas deberian de ocupar mas de una celda}
las areas deben ser consecutivas, tanto horizontal como verticalmente
no pueden ser la combinacion de celdas en diagonal y eso, deben formar un cuadrilatero

grid-line (colum line y row line) - es la linea que forma las columnas y filas

*/


/* -------------------------------------------PROPIEDADES--------------------------*/
/* 


-------------------------grid-container----------------------------

unidades 'auto' y fr = es como un flex-grow, el espacio sobrante
repeat (cantidad, tamaño/s)

grid-template: rows     (grid-container)
grid-temlpáte: colums    (grid-container)

grid-row-gap (grid container) es un especie de margin interno, la distancia que debe haber entre las celdas,obviando el contenedor, o sea no se van a separar de los bordes

grid-column-gap        (grid container)
grid-gap: row column   (grid-container)


-------------------------grid-item----------------------------

grid-row-start      (grid item)
grid-row-end        (grid item)
grid-column-start (grid item)
grid-column-end (grid item)

grid-row        (grid item)
grid-column     (grid item)


*/


body{
    background: radial-gradient(circle,rgb(255, 255, 255),#bbb) ;
    padding: 30px;
}

.grid-container{
    background-color: #333 ;
    display: grid;
    grid-template-rows: repeat(4,150px);
    grid-template-columns: repeat(3,150) 1fr;
    border: 3xp solid black;
    grid-column-gap: 15px; /* esapciado entre cajas de forma horizontal en el eje x */
    grid-row-gap: 15px; /* esapciado entre cajas de forma vertical, en el eje y */
    
}

.grid-item{
    border: 1px solid black;
    background-color: #999;
}

.grid-item:first-child {
    background: red;
    /*grid-column: 1 /3;

    /* shorthand de grid-colunm-start y grid-column-end */

    /*grid-row: 1/3;

    /* con span nos ahorramos el esatr conatndo las lineas y siumplemente le decimos la cantidad de filas o columnas que debe ocuopar*/

    grid-column: 3 / span 2; /* le decimos que desde la linea 3 ocupe dos bloques de columna*/
    grid-row: 1 / span 2; /* le decimos quie desde la linea 1 ocupe 2 filas */
}



.grid-item:nth-child(2){
    background-color: green;
    grid-column: 1 / span 2;
    grid-row: 3 / span 2;
}

/*  -------------------GRID IMPLICITO Y EXPLICITO----------- */
/*                              GRID-AUTO                    */
/*

grid-auto-rows: (Igual que el template)
grid-auto-colums: (Igual que el template)
grid-auto-flow: row(defalult), column y dense

*/


.grid-container{
    grid-auto-rows: 150px; /* para aquellas celdas que quedan mochas en las filas

    si fueran en las columnas sería:
    grid-auto-colums: tamaño demlas celdas */

    grid-auto-flow: dense;  /* rellena aquellas celdas vacias
    que se rompieron por nuestra ubicacion de las demas celdas*/
}




/*--------------------------GRID DINAMICO------------------------*/
/*

minmax()
min-content
max-content


Cantidades:

auto-fill genera la cantidad de col o fil que pueda, que cumpla con las especificaciones
cuando se expande el chrome y hay espacio para otra caja, hablando del main axis, es como si se abriera un hueco para que la caja de abajo pase a ser compañera de la primera columna

auto-fit escala los elementos, no crea mas celdas como el fill
*/

.grid-container{
    grid-template-rows: repeat(4,150px);
    grid-template-columns: repeat(3,min-content) 1fr;
    grid-template-columns: repeat(3,minmax(100px,200px)) 1fr;
    grid-template-columns: repeat(3,minmax(min-content,max-content)) 1fr;
    grid-template-columns: repeat(3,minmax(min-content,200px)) 1fr;


}

.grid-container{
    grid-template-rows: repeat(4,150px);
    grid-template-columns: repeat(auto-fill,minmax(100px, 1fr)
    );
    grid-template-columns: repeat(5,minmax(100px, 1fr)
    );
    grid-auto-flow: dense;

}



/*----------ALINEACION Y CONTROL DE FULJO-------------------*/


/*  PROPIEDADES DEL GRID CONTAINER

justify-items (horizontalmente)  agarra las filas y las centra
align-items (verticalmente)

strech(default)  -start - center - end

place-items: align-items  justify-items


ALINEACION DE FILAS Y COLUMNAS


jusitfy-content (Horizontalmente)
align-content (verticalmente)

strech(default) - start - center - end
mas las de flex

            -space-around
            -space-between
            -space-evenly
los content solo son los que pueden recibir las propiedades de flex

APLICADO AL GRID ITEM

align-self
justify-self
palce-self: abreviado(align-self  justify-self)

strech(defalult) start - center - end

oreder - igual que flex

*/

.grid-container{
    width: 100%;
    height: 800px;
    /*
    Estas son para alinear items
    */
    justify-items: center;
    align-items: center;
    
    grid-template-columns: repeat(3,1fr
    );
    grid-template-rows: repeat(3,1fr);
    /* Estas son para alinear filas y columans */
    /*justify-content: space-evenly ;
    /* esta es para la columnas ya que es ajustar, en los costados, main-axis
    
    
    el align-content es para el eje y*/
    /*align-content: space-evenly;*/
    border: 2px solid yellow;
    padding: 10px;
}

.grid-item{
    border: 2px solid yellow;
    font-size: 30px;
    padding: 50px;
}


/*    GRID ITEM    */

.grid-item:first-child {
    background: red;
    grid-column: 1 / 1; 
    grid-row:1 / 1; 
    align-self: start;
    justify-self: start;
}



.grid-item:nth-child(2){
    background-color: grey;
    grid-column: 2 / 3;
    grid-row: 2 / 1

}

.grid-item:nth-child(3){
    place-self: start end;
    background: red;
}

.grid-item:nth-child(7){
    place-self: end start;
    background: red;
}

.grid-item:nth-child(9){
    align-self: flex-end;
    justify-self: end;
    background: red;
}

.grid-item:nth-child(4){
    align-self: center;
    justify-self: end;
}

.grid-item:nth-child(6){
    place-self: center start;
}

.grid-item:nth-child(2){
    align-self: end;
    justify-self: center;
}

.grid-item:nth-child(8){
    align-self: start;
    justify-self: center;
}

.grid-item:nth-child(5){
    background: green;
}

