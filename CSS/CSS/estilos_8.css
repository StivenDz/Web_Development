*{
    font-family: 'Lobster',cursive;
    font-weight: 100;
    font-size: 30px;
}
/*                                             OUTLINE                                                     */
.caja1{
    width:200px;
    height:200px;
    background: red;
    margin:auto;
    /*border:10px solid blue;*/
    outline:10px solid blue;
}

.caja2{
    width:200px;
    height:200px;
    background: yellow;
    margin:auto;
}

/*                                             POSITION                                                     */
/* Cuando un elemeto tiene position, adquiere nuevas propeidades top, right,left,bottom,z-index
position:static, se coonsidera que no está posicionado, no adquiere estas propiedades */

/*                                       position:relative;                                                                   */

.caja-1, .caja-2 , .caja-3, .caja-4{
    width:120px;
    height:120px;
    display:block;
    background:yellow;
}

.caja-1{
    background-color: orange;
}
.caja-2{
    background-color: green;
    position: relative;  /* con esta propiedad, esta caja adquiere top, left, rigth, bottom 
    conserva su espacio en pantalla, su punto de referenica es el mismo
    las pripiedades top y left tiene prioridad sobre right y bottom, solo si usas las 4, las otras dos se ignorarían
    o usamos top y rigth/bottom y right/top y left/bottom y left */
    /* Cuando una caja tiene position, adquiere tambien el Z-Index */
    top:60px;
    left:20px;
    /* la caja 2 esta encima de la caja 3 */


}
.caja-3{
    background-color: lightblue;
    position:relative; /* Ahora este va a estar encima de la caja 2, porque en html se escribio despues
    es como hacer un dibujo encima de otro, en este momento, como las dos cajas tienen position, adquieren el z_index
    las 2 igual a cero
    si la caja 2 tuviera un z-index :1;
    estaria por encima de la caja 3  */
}
.caja-4{
    background-color: yellow;

}

/*                                                       Z-Index                                         */

.contenedor{
    width: 300px;
    height:300px;
    background:blue;
    margin:40px;
    position:relative;
}

/*                 Esta es la unica forma para que el contenedor este encima del hijo                  */
.hijo{
    background:orange;
    height:120px;
    width:120px;
    position:relative;
    top:-20px;
    left:-20px;
    z-index: -1;
}

/*                                                      position:absolute;                              */ 
.caja_1, .caja_2 , .caja_3, .caja_4{
    width: 16px;
    height:160px;
    display:block;
    background:yellow;
}
.caja_1{
    background-color: orange;

}
.caja_2{
    background-color: green;
    position:absolute;
    opacity: .5;    /*   .5 = 0.5 , va del cero hasta el 1  */
    margin-left: 250px;
    /*
    con el position:absolute, el espacio reservado de la caja deja de existir, por ende lo
    ocupa la caja de abajo, entonces quedaria la de abajo en la posicion de la de arriba ,
    pero se vería la que tiene el absoulte
    
    si le añadimos top, el punto de referencia sería el viewport o el contenedor(si es que está posicionado) que lo contenga vr*/

}
.caja_3{
    background-color: black;

}

.container{
    position:relative;
    border:4px solid red;
    margin:50px auto;
    height: 450px;
    width: 450px;
}

.caja--1, .caja--2 , .caja--3, .caja--4,.caja--5{
    width: 100px;
    height:100px;
    background:yellow;
}

.caja--1{
    top:0;
    left: 0;
}
.caja--2{
    right: 0;
}
.caja--3{
    right: 0;
    bottom: 0;
}
.caja--4{
    left: 0;
    bottom: 0;
}
.caja--5{
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    margin: auto;
}



/*                                                  position:fixed;                                                                          */

/*  el elemento o la caja que lo contenga queda fijado  */
/*
body{
    margin-top:100px;
}
*/
.caja-fixed{
    background:green; /* pierde su espacio reservado, pero queda fijo, mientr as haces scroll el sigue con el*/
    position: fixed;
    opacity: .3;
    margin-top: -100px;
}



/*                                                position:sticky;                                                                  */
/* es una fusion del relative y el fixed, mantiene su espacio reservado y cuando te encuentras con 
la caja que lo contiene, se va contigo dependiendo de las indicaciones que le des */

.caja-fixed{
    background:red;
    position: sticky;
    opacity: .3;
    margin-top: 20px;
}

